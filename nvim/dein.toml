[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # カラースキーマ
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  "au MyAutoCmd VimEnter * nested colorscheme hybrid
'''

[[plugins]] # カラースキーマ
repo = 'jonathanfilip/vim-lucius'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  au MyAutoCmd VimEnter * nested colorscheme lucius
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nnoremap <silent> <C-f><C-f> :<C-u>Denite file_rec<CR>
  nnoremap <silent> <C-f><C-i> :<C-u>Denite -input=<C-r>=expand('%:h')<CR> file_rec<CR>
  nnoremap <silent> <C-f><C-m> :<C-u>Denite file_mru<CR>
  nnoremap <silent> <C-f><C-g> :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>
  nnoremap <silent> <C-f><C-r> :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>
  nnoremap <silent> <C-f><C-n> :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=+1 -immediately<CR>
  nnoremap <silent> <C-f><C-p> :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=-1 -immediately<CR>
  "C-N,C-Pで上下移動
  call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')
  "C-J,C-Kでsplitで開く
  call denite#custom#map('insert', '<C-j>', '<denite:do_action:split>', 'noremap')
  call denite#custom#map('insert', '<C-k>', '<denite:do_action:vsplit>', 'noremap')
  if executable('rg')
      call denite#custom#var('file_rec', 'command', ['rg', '--files', '--hidden', '--glob', '!.git'])
      call denite#custom#var('grep', 'command', ['rg'])
  endif

  " customize ignore globs
  call denite#custom#source('file_rec', 'matchers', ['matcher_fuzzy','matcher_ignore_globs'])
  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
        \ [
        \ '.git/', 'build/', '__pycache__/',
        \ 'images/', '*.o', '*.make',
        \ '*.min.*',
        \ 'img/', 'fonts/', 'node_modules/'])
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_path = '.*'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  " statusline
  " -------------------------------
  set laststatus=2
  highlight StatusLine   term=bold,reverse cterm=reverse ctermfg=28 ctermbg=226
  highlight StatusLineNC term=reverse cterm=reverse ctermfg=18 ctermbg=250
  "set statusline=%<[%n]%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}%y\ %F%=%l,%c%V%8P
  set statusline=
  set statusline+=%m    " %m 修正フラグ
  set statusline+=%<    " 行が長すぎるときに切り詰める位置
  set statusline+=[%n]  " バッファ番号
  set statusline+=%r    " %r 読み込み専用フラグ
  set statusline+=%h    " %h ヘルプバッファフラグ
  set statusline+=%w    " %w プレビューウィンドウフラグ
  set statusline+=%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}  " fencとffを表示
  set statusline+=%y    " バッファ内のファイルのタイプ
  set statusline+=\     " 空白スペース
  if winwidth(0) >= 130
    set statusline+=%F    " バッファ内のファイルのフルパス
  else
    set statusline+=%t    " ファイル名のみ
  endif
  set statusline+=%=    " 左寄せ項目と右寄せ項目の区切り
  set statusline+=%{fugitive#statusline()}  " Gitのブランチ名を表示
  set statusline+=\     " 空白スペース1個
  set statusline+=%1l   " 何行目にカーソルがあるか
  "set statusline+=/
  "set statusline+=%L    " バッファ内の総行数
  set statusline+=,
  set statusline+=%02c    " 何列目にカーソルがあるか
  "set statusline+=%V    " 画面上の何列目にカーソルがあるか
  set statusline+=\     " 空白スペース1個
  set statusline+=%P    " ファイル内の何％の位置にあるか

  " change statusline color while inserrt mode
  " -------------------------------
  let g:hi_insert = 'highlight StatusLine guifg=white guibg=MediumOrchid gui=none ctermfg=white ctermbg=DarkRed cterm=none'

  augroup InsertHook
    autocmd!
  augroup END

  if has('syntax')
    augroup InsertHook
      autocmd InsertEnter * call s:StatusLine('Enter')
      autocmd InsertLeave * call s:StatusLine('Leave')
      autocmd ColorScheme * silent! let s:slhlcmd = 'highlight ' . s:GetHighlight('StatusLine')
    augroup END
  endif

  function! s:StatusLine(mode)
    if a:mode == 'Enter'
      silent exec g:hi_insert
    else
      highlight clear StatusLine
      silent exec s:slhlcmd
    endif
  endfunction

  function! s:GetHighlight(hi)
    redir => hl
    exec 'highlight '.a:hi
    redir END
    let hl = substitute(hl, '[\r\n]', '', 'g')
    let hl = substitute(hl, 'xxx', '', '')
    return hl
  endfunction
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)

  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
'''
